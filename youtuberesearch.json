{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -784,
        224
      ],
      "id": "1cc3e277-1dbe-44a8-bfe8-f1c443ef8fa3",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/search?part=snippet&q=keyword&maxResults=50&key=YOUR_API_KEY",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -560,
        224
      ],
      "id": "56cf7315-a23b-4c40-8bea-5f1b67b44eb0",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "const items = $json.items || [];\n\nconst ids = items\n  .filter(i => i.id.kind === 'youtube#video')\n  .slice(0, 50)\n  .map(i => i.id.videoId)\n  .join(',');\n\nreturn [{ json: { videoIds: ids } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        224
      ],
      "id": "a0f01852-ed9f-40d2-b71c-e4f2c6566401",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/videos?part=statistics&id={{ $json.videoIds }}&key=YOUR_API_KEY",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -176,
        224
      ],
      "id": "cb3fb3cb-76df-4c3d-95b1-7d19bb610990",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json;\n\n// Extract items array\nconst items = Array.isArray(response) ? response[0].items : response.items;\n\n// Map each video item into a separate item with title, ID, URL, and view count\nreturn items.map(video => {\n  const videoId = video.id?.videoId || video.id; // handles different formats\n  return {\n    json: {\n      videoId,\n      title: video.snippet?.title || video.title || \"Untitled\",\n      url: `https://www.youtube.com/watch?v=${videoId}`,\n      viewCount: video.statistics?.viewCount || video.viewCount || null\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        0
      ],
      "id": "95bf573f-eb2d-40cc-81e2-ea6c4c29caa8",
      "name": "Code1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        432,
        224
      ],
      "id": "d87706bb-54df-44b9-aa16-4388d3f362e4",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/pintostudio~youtube-transcript-scraper/run-sync-get-dataset-items?token=apify_api_YOUR_API-KEY",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrl\": \"{{ $json.URL }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        704,
        224
      ],
      "id": "5aceaf29-cbad-4b62-b0e4-b8a0c9d96ce4",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a YouTube strategist. Given a marketing angle or content hook, your job is to generate 2–3 compelling YouTube video ideas that align with the angle. Each idea should include a short title and a brief explanation of why it works.\n\n## Guidelines:\n- Each title should be clickable and curiosity-driven\n- Ideas should be feasible for solo creators or small teams\n- Avoid clickbait; favor depth, storytelling, or actionable insight\n- Tailor ideas to marketing, entrepreneurship, or creator economy niches (unless told otherwise)\n\n## Input (Angle): {{ $json.data }}\n\n## Output Format:\n[\n  {\n    \"title\": \"Video Title Idea 1\",\n    \"reason\": \"Why this idea fits the angle\"\n  },\n  {\n    \"title\": \"Video Title Idea 2\",\n    \"reason\": \"Why this idea fits the angle\"\n  },\n  {\n    \"title\": \"Video Title Idea 3\",\n    \"reason\": \"Why this idea fits the angle\"\n  }\n]\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1040,
        240
      ],
      "id": "a08dbfe1-eb1d-484b-917e-b7b688a37049",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        960,
        432
      ],
      "id": "0d2c252c-6c29-4b67-936c-1fdc9f104eec",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Hi02E391flxREeCL",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        224,
        224
      ],
      "id": "78f7381c-2b52-4898-a8c3-076563e65449",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Q2cp9Pj98wDxvTr5",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        0,
        0
      ],
      "id": "cc5e9662-85de-4a08-8e44-57480c22281b",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Parse raw JSON string if it's coming from a text-based LLM output\nconst parsed = JSON.parse($json.text || $json.output || $json.data); // Adjust key as needed\n\n// Return each as a separate item\nreturn parsed.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1408,
        240
      ],
      "id": "8d50187b-f8e7-446d-8443-cceaa1b87f63",
      "name": "Code2"
    }
  ],
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "74f05c1cebd184a5d02e9c4c7deeeee0b4b4c089b73d63fe289d2b9014d64811"
  }
}
